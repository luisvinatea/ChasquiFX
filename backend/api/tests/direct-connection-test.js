/**
 * Direct MongoDB Atlas Connection Test
 * Based on the autogenerated template
 */

import { MongoClient, ServerApiVersion } from "mongodb";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

// Get credentials from environment variables
const username = process.env.MONGODB_USER;
const password = process.env.MONGODB_PASSWORD;
const host = process.env.MONGODB_HOST || "chasquifx.ymxb5bs.mongodb.net";
const dbName = process.env.MONGODB_DBNAME || "chasquifx";

// Exit if credentials are missing
if (!username || !password) {
  console.error("ERROR: MongoDB credentials missing in environment variables");
  console.error("Please set MONGODB_USER and MONGODB_PASSWORD in .env file");
  process.exit(1);
}

const uri = `mongodb+srv://${username}:${password}@${host}/?retryWrites=true&w=majority&appName=ChasquiFX`;

console.log("Attempting to connect with URI:", uri.replace(password, "****"));

// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
});

async function run() {
  try {
    console.log("Connecting to MongoDB Atlas...");
    // Connect the client to the server
    await client.connect();

    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log(
      "Pinged your deployment. You successfully connected to MongoDB!"
    );

    // List available databases
    const dbs = await client.db().admin().listDatabases();
    console.log("Available databases:");
    dbs.databases.forEach((db) => {
      console.log(`  - ${db.name}`);
    });

    return true;
  } catch (err) {
    console.error(`ERROR: ${err.message}`);
    console.error(err);
    return false;
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
    console.log("Connection closed");
  }
}

run()
  .then((success) => {
    if (success) {
      console.log("Connection test completed successfully");
      process.exit(0);
    } else {
      console.log("Connection test failed");
      process.exit(1);
    }
  })
  .catch((err) => {
    console.error("Unhandled error:", err);
    process.exit(1);
  });
